swagger: '2.0'
info:
  description: >-
    API for Clients using CloudWalker File Vault Provider to download files from
    cloud
  version: 1.7.0
  title: CloudWalker File Vault Provider API
  contact:
    name: Enterprise Integration (ENI) Service Hub, Team DEIMOS
    email: DTIT_ENI_Hub_Team_Deimos@telekom.de
  license:
    name: Deutsche Telekom AG
  x-api-category: SYSTEM
host: localhost
basePath: /cfv-provider/v1
tags:
  - name: client-file-chunk-download-controller
    description: Client File Chunk Download Controller
  - name: client-file-validation-controller
    description: Client File Validation Controller
  - name: files
    description: Client Prepare File Controller
  - name: management
    description: Client File Metadata Management Controller
paths:
  /files/{fileId}/direct-download:
    get:
      tags:
        - client-file-chunk-download-controller
      summary: Get file data specified by range request
      description: >-
        Get part of the file by specifying request with header Range:
        bytes=<from>-<to>.
      operationId: directDownloadDataUsingGET
      produces:
        - application/octet-stream
      parameters:
        - name: fileId
          in: path
          description: Id of file.
          required: true
          type: string
          format: uuid
        - name: Range
          in: header
          description: Range
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileSystemResource'
        '206':
          description: >-
            Partial Content. Server authorized client and successfully returned
            the range.
        '400':
          description: >-
            Bad request. Business exception - The request hasn't been fulfilled
            because of wrong request data.
        '401':
          description: >-
            Unauthorized. The Client has not provided authorization to fulfil
            the request.
        '403':
          description: Forbidden. The Client has not been authorized to fulfil the request.
        '404':
          description: Not Found. Request against a non-existent resource.
        '416':
          description: Range Not Satisfiable. Range header is in invalid format.
  /files/{fileId}/prepare:
    patch:
      tags:
        - files
      summary: >-
        Downloads file from AWS S3 bucket to local filesystem so it's prepared
        for download. Once this is finished client is notified that the file is
        prepared.
      description: FileId is used to get file from S3 and save it to the local filesystem.
      operationId: prepareFileUsingPATCH
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: fileId
          in: path
          description: Id of file.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: >-
            OK - Server authorized client (m2m communication), and returns
            client file metadata. File is prepared asynchronously and sub will
            be notified when file is downloaded.
        '204':
          description: No Content
        '400':
          description: >-
            Bad Request - Missing one of required headers or required payload
            invalid/missing data.
        '401':
          description: >-
            Unauthorized - The Client has not provided authorization to fulfill
            the request.
        '403':
          description: Forbidden - File expired.
        '404':
          description: >-
            Resource not found - File specified by fileId is not present in DB
            or S3.
  /files/{fileId}/validate-checksum:
    post:
      tags:
        - client-file-validation-controller
      summary: Validate checksum of file
      description: >-
        Takes checksum and fileId from the request and compares it to the
        checksum of the file in database.
      operationId: validateChecksumUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: clientFileValidationRequestDto
          description: Validation request with checksum to be verified against database
          required: true
          schema:
            $ref: '#/definitions/ClientFileValidationRequestDto'
        - name: fileId
          in: path
          description: Id of file.
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK. Checksum was validated and is either valid or invalid.
          schema:
            $ref: '#/definitions/ClientFileValidationResponseDto'
        '201':
          description: Created
        '400':
          description: >-
            Bad request. Business exception - The request hasn't been fulfilled
            because of wrong request data.
        '401':
          description: >-
            Unauthorized. The Client has not provided authorization to fulfil
            the request.
        '403':
          description: Forbidden. The Client has not been authorized to fulfil the request.
        '404':
          description: Not Found. Request against a non-existent resource.
  /management/client-file-metadata:
    get:
      tags:
        - management
      summary: Search for client file metadata.
      description: Get request used to search for client file metadata in repository.
      operationId: searchClientFileMetadataUsingGET
      produces:
        - '*/*'
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
          format: int64
        - name: paged
          in: query
          required: false
          type: boolean
        - name: pageNumber
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          in: query
          required: false
          type: integer
          format: int32
        - name: search
          in: query
          description: search
          required: false
          type: string
        - name: sort.sorted
          in: query
          required: false
          type: boolean
        - name: sort.unsorted
          in: query
          required: false
          type: boolean
        - name: unpaged
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: >-
            Ok - request for search was send successfully and page of client
            file metadata was returned.
          schema:
            $ref: '#/definitions/PageOfClientFileMetadataResponseDto'
        '400':
          description: >-
            Bad request. Business exception - The request hasn't been fulfilled
            because of wrong request data.
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
definitions:
  ClientFileMetadataResponseDto:
    type: object
    properties:
      checksum:
        type: string
      compressed:
        type: boolean
      createdBy:
        type: string
      createdDate:
        type: string
        format: date-time
      customMetadata:
        type: string
      encrypted:
        type: boolean
      extension:
        type: string
      fileType:
        type: string
      id:
        type: string
        format: uuid
      lastModifiedBy:
        type: string
      modifiedDate:
        type: string
        format: date-time
      name:
        type: string
      size:
        type: string
      status:
        type: string
      timeToLive:
        type: integer
        format: int64
    title: ClientFileMetadataResponseDto
  ClientFileValidationRequestDto:
    type: object
    required:
      - receivedChecksum
    properties:
      receivedChecksum:
        type: string
    title: ClientFileValidationRequestDto
  ClientFileValidationResponseDto:
    type: object
    properties:
      valid:
        type: boolean
    title: ClientFileValidationResponseDto
  FileSystemResource:
    type: object
    properties:
      description:
        type: string
      file:
        type: file
      filename:
        type: string
      inputStream:
        $ref: '#/definitions/InputStream'
      open:
        type: boolean
      outputStream:
        $ref: '#/definitions/OutputStream'
      path:
        type: string
      readable:
        type: boolean
      uri:
        type: string
        format: uri
      url:
        type: string
        format: url
      writable:
        type: boolean
    title: FileSystemResource
  InputStream:
    type: object
    title: InputStream
  OutputStream:
    type: object
    title: OutputStream
  PageOfClientFileMetadataResponseDto:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/ClientFileMetadataResponseDto'
      empty:
        type: boolean
      first:
        type: boolean
      last:
        type: boolean
      number:
        type: integer
        format: int32
      numberOfElements:
        type: integer
        format: int32
      pageable:
        $ref: '#/definitions/Pageable'
      size:
        type: integer
        format: int32
      sort:
        $ref: '#/definitions/Sort'
      totalElements:
        type: integer
        format: int64
      totalPages:
        type: integer
        format: int32
    title: PageOfClientFileMetadataResponseDto
  Pageable:
    type: object
    properties:
      offset:
        type: integer
        format: int64
      pageNumber:
        type: integer
        format: int32
      pageSize:
        type: integer
        format: int32
      paged:
        type: boolean
      sort:
        $ref: '#/definitions/Sort'
      unpaged:
        type: boolean
    title: Pageable
  Sort:
    type: object
    properties:
      empty:
        type: boolean
      sorted:
        type: boolean
      unsorted:
        type: boolean
    title: Sort
