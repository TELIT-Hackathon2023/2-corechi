swagger: '2.0'
info:
  title: GeographicAddress based on TMF 673
  description: |+
    ## TMF API Reference : TMF 673 - Place - Geographic Address Management
    ### Release : 19.5 - January 2020
    ### Adapted Version f√ºr Deutsche Telekom AF, API & Service Factory
    ### Owner: API Portfolio Management, Deutsche Telekom AG, Telekom IT GmbH

    The Geographic Address API provides a standardized client interface to an address management system.
    It allows looking for valid German addresses based on certain query parameters. These query parameters can be complete or parts of addresses like zip-codes, city or street names.
    If only parts of query parameters are given the API will list all fitting addresses.
    The response format can be controlled by special query- and header fields.

    Additionally, a method is provided to get information on subaddresses e.g. numbers of levels or flats.
    Validation of geographic addresses is omitted for future versions.

    A detailed description of API methods and valid query ranges can be found at the respective sections of this file.

    The API provides the information requested in near real-time so that it can used by consumers in an interactive way.

    ### Resources
    - GeographicAddress
    - GeographicSubAddress

    ### Operations
    Geographic Address Management API performs the following operations :
    - Retrieve a geographic address or a collection of geographic addresses
    - Retrieve a geographic sub-address


  version: '1.0.0'
  contact:
    name: 'Telekom IT, API Portfolio Management'
host: serverRoot
basePath: /geographicAddressManagement/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: geographicAddress
paths:
  /geographicAddress:
    get:
      operationId: listGeographicAddress
      summary: List or find GeographicAddress objects
      description: "This operation lists or finds GeographicAddress entities.\nAddresses can be looked up by using these query parameters:\n\n#postcode\nA zip-code or a left part of it can be given. Starting from the first number given as query parameter the service will give back a list of address entries fitting to that zip-codes. The match will be done starting from the left of postcode. \nExample: postcode=28 retrieves a list of postcodes starting with \"28\" (e.g. 28192, 28217, ...) but not 32805.\n\n#city\nA city name or a part of it can be given. Starting from the first character given as query parameter the service will give back a list of address entries fitting the city query.\nA part of this query parameter will be searched in any part of possible city names. The responded list will start with cities that contain the search string leftmost and will be ordered in ascending alphabetical order. \nThe search in case insensitive. \nExample: city=stadt retrieves eg. Stadtallendorf, Stadtlohn, ..., Karlstadt, Neustadt, ...\n\n#street\nPrerequisite is a given valid combination of postcode and city as query parameters shown above. If this is fulfilled the response will contain all streetnames fitting to the given characters in the street-query parameter. The response will be given from the first character on.\nIf the prerequisite (postcode, city) is not met, the result will be empty.\nA part of the street query parameter will be searched in any part of possible street names. The responded list will start with streets that contain the search string leftmost and will be ordered in ascending alphabetical order. \nThe search in case insensitive.\nExample: analog to city.\n\n#streetNr\nPrerequisite are valid postcode, city and street in the above query parameters. Given this the response will give back all possible values of numbers within the street fitting the numbers given in this query parameter. \n\n#limit\nLimits the number of records contained in the API response it can range from 1 to 1000. If no limit is given, the default of 100 is assumed.\n\n#offset\nSets the starting point for returned records within the complete list of results. \nexample: limit=100&offset=300 returns records 300-399\nlimit=10&offset=170 returns records 170-179\nof all found matches.\n\n#fields\nLimits the amount of data given in the response. It is possible to request one or two of the allowed values to reduce the amount of response data. The returned list will only contain the fields given here with distinct operator applied. This means that each combination of requested values occurs only once.\nThe list will be in ascending order starting from left to right of the fields given.\nA field value must not be given multiple times. \n\nexample: \n\"postcode=283&fields=city postcode\" returns an ascending list of postcodes and city names of all postcodes starting with 283. The list is ordered first by city and second by postcode.\n\n\"postcode=283&fields=postcode city\" returns an ascending list of postcodes and city names of all postcodes starting with 283. The list is ordered first by postcode and second by city."
      tags:
        - geographicAddress


