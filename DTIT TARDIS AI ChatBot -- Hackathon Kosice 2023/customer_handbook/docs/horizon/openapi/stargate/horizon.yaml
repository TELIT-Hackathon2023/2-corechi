openapi: 3.0.0
info:
  title: CloudEvents Intermediary
  version: 1.0.5
  contact:
    name: ENterprise Integration (ENI) Service Hub, Team Callisto
    email: DL-DH_EI_Team_Callisto@telekom.de
    url: https://codeshare.wesp.telekom.net/gitlab/tardis/documentation/horizon
  description: 'Simple API, demonstrating the use of CloudEvents as provided by an Intermediary (Broker) for event fan-out to consumers, as per their authorized subscription type and trigger criteria.'
servers:
  - url: 'https://{stargateFqhn}/horizon'
    description: Access via Stargate
    variables:
      stargateFqhn:
        description: "FQHN of Stargate"
        default: "https://stargate-playground.live.dhei.telekom.de"
components:
  schemas:
    Problem:
      title: Problem
      type: object
      description: 'RFC Problem Details. See https://tools.ietf.org/html/rfc7807#page-5 for more details.'
      properties:
        type:
          type: string
          default: 'about:blank'
          description: 'A URL reference [RFC3986] that identifies the problem type. Consumers MUST use the "type" string as the primary identifier for the problem type.'
          format: url
        status:
          description: 'The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. The "status" member, if present, is only advisory; it conveys the HTTP status code used for the convenience of the consumer. Generators MUST use the same status code in the actual HTTP response.'
          type: integer
        title:
          type: string
          description: 'A short, human-readable summary of the problem type. Consumers SHOULD NOT automatically dereference the type URL.'
        instance:
          type: string
          description: 'A URL reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.'
          format: url
        detail:
          type: string
          description: 'A human-readable explanation specific to this occurrence of the problem.  The "detail" member, if present, ought to focus on helping the client correct the problem, rather than giving debugging information.'
      required:
        - type
        - title
    Event:
      title: Event
      x-tags:
        - CloudEvents
      description: 'This resource is used to emit and receive events, and resource representations or resource identifiers (subject).'
      allOf:
        - title: Id
          type: object
          x-tags:
            - CloudEvents
          description: "Type: `String`\n\nDescription: Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.\n\n* Examples:  \n    * An event counter maintained by the producer\n    * A UUID. \n\n* Constraints:  \n    * REQUIRED\n    * MUST be a non-empty string\n    * MUST be unique within the scope of the producer"
          properties:
            id:
              type: string
              description: Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event.
              format: uuid
              example: c38ce597-bca4-4bc9-9f00-0339c935568b
          required:
            - id
        - title: Source
          type: object
          x-tags:
            - CloudEvents
          description: |-
            Type: `URL-reference`

            Description: Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.

            > Producers MUST ensure that `source` + `id` is unique for each distinct event.

            An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.

            A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.

            * Constraints:
                * REQUIRED
                * MUST be a non-empty URL-reference
                * An absolute URL is RECOMMENDED

            *  Examples
                * Internet-wide unique URL with a DNS authority.
                    * https://github.com/cloudevents
                    * mailto:[cncf-wg-serverless@lists.cncf.io](mailto:cncf-wg-serverless@lists.cncf.io)
                * Universally-unique URN with a UUID:
                    * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a6
                * Application-specific identifiers

                    * /cloudevents/spec/pull/123
                    * /sensors/tn-1234567/alerts
                    * 1-555-123-4567
          properties:
            source:
              type: string
              description: 'Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URL is defined by the event producer.'
              format: url
              example: 'http://apihost/some/path/resource/1234'
          required:
            - source
        - title: SpecVersion
          type: object
          x-tags:
            - CloudEvents
          description: |-
            Type: `String`

            Description: The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.

            * Constraints:
                * REQUIRED
                * MUST be a non-empty string
          properties:
            specversion:
              type: string
              example: '1.0'
              default: 1
              description: The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.
          required:
            - specversion
        - title: Type
          type: object
          x-tags:
            - CloudEvents
          description: "Type: `String`\n\nDescription: This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the `type` - see\n    [Versioning of Attributes in the Primer](https://github.com/cloudevents/spec/blob/v1.0/primer.md#versioning-of-attributes) for more information.\n    \n* Constraints:\n    * REQUIRED\n    * MUST be a non-empty string\n    * SHOULD be prefixed with a reverse-DNS name. The prefixed domain dictates the\n        organization which defines the semantics of this event type.\n* Examples\n\n    * com.github.pull.create\n    * com.example.object.delete.v2"
          properties:
            type:
              type: string
              minLength: 1
              example: com.group.org.service.function.v1
              description: |-
                This attribute contains a value describing the type of event
                    related to the originating occurrence. Often this attribute is used for
                    routing, observability, policy enforcement, etc.
          required:
            - type
        - title: DataContentType
          type: object
          x-tags:
            - CloudEvents
          description: "Type: `String` per [RFC 2046](https://tools.ietf.org/html/rfc2046)  \n\nDescription: Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](https://github.com/cloudevents/spec/blob/v1.0/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to \"application/xml\". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](https://github.com/cloudevents/spec/blob/v1.0/json-format.md#31-handling-of-data).\n\nFor some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol\n\nIn some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the \"application/json\" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype=\"application/json\"`.\n\nWhen translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.\n* Constraints:\n    * OPTIONAL\n    * If present, MUST adhere to the format specified in\n        [RFC 2046](https://tools.ietf.org/html/rfc2046)\n* For Media Type examples see\n    [IANA Media Types](http://www.iana.org/assignments/media-types/media-types.xhtml)"
          properties:
            datacontenttype:
              type: string
              example: application/json
              default: application/json
              description: 'Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format.'
        - title: DataSchema
          type: object
          x-tags:
            - CloudEvents
          description: |-
            Type: `URL`

            Description: Identifies the schema that `data` adheres to. Incompatible changes to the schema SHOULD be reflected by a different URL. See [Versioning of Attributes in the Primer](https://github.com/cloudevents/spec/blob/v1.0/primer.md#versioning-of-attributes) for more information.

            * Constraints:
                * OPTIONAL
                * If present, MUST be a non-empty URL
          properties:
            dataschema:
              type: string
              description: Identifies the schema that `data` adheres to. Incompatible changes to the schema SHOULD be reflected by a different URL.
              format: url
              example: 'http://apihost/schema/definition.json'
              minLength: 1
        - x-tags:
            - CloudEvents
          title: Data
          description: |-
            As defined by the term [Data](https://github.com/cloudevents/spec/blob/v1.0/spec.md#data), CloudEvents MAY include domain-specific information about the occurrence. When present, this information will be encapsulated within `data`.

            * Description: The event payload. This specification does not place any restriction on the type of this information. It is encoded into a media format which is specified by the `datacontenttype` attribute (e.g. application/json), and adheres to the `dataschema` format when those respective attributes are present.

            * Constraints:
                * OPTIONAL
          type: object
          properties:
            data:
              type: object
              description: 'As defined by the term Data, CloudEvents MAY include domain-specific information about the occurrence. When present, this information will be encapsulated within data.'
        - title: DataRef
          type: object
          x-tags:
            - CloudEvents
          description: |-
            As defined by the term [Data](https://github.com/cloudevents/spec/blob/v1.0/spec.md#data), CloudEvents MAY include domain-specific information about the occurrence. When present, this information will be encapsulated within `data`. The `dataref` attribute MAY be used to reference another location where this information is stored. The information, whether accessed via `data` or `dataref` MUST be identical.

            Both `data` and the `dataref` attribute MAY exist at the same time. A middleware
            MAY drop `data` when the `dataref` attribute exists, it MAY add
            the `dataref` attribute and drop the `data` attribute, or it MAY add the `data`
            attribute by using the `dataref` attribute.

            Type: `URL-reference`

            Description: A reference to a location where the event payload is stored. The location MAY not be accessible without further information (e.g. a pre-shared secret).

            Known as the "Claim Check Pattern", this attribute MAY be used for a variety of purposes, including:
                * If the [Data](https://github.com/cloudevents/spec/blob/v1.0/spec.md#data) is too large to be included in the message, the `data` is not present, and the consumer can retrieve it using this attribute.
                * If the consumer wants to verify that the [Data](https://github.com/cloudevents/spec/blob/v1.0/spec.md#data) has not been tampered with, it can retrieve it from a trusted source using this attribute.
                * If the [Data](https://github.com/cloudevents/spec/blob/v1.0/spec.md#data) MUST only be viewed by trusted consumers (e.g. personally identifiable information), only a trusted consumer can retrieve it using this attribute and a pre-shared secret.

            If this attribute is used, the information SHOULD be accessible long enough for all consumers to retrieve it, but MAY not be stored for an extended period of time.

            * Constraints:
                * OPTIONAL
          properties:
            dataref:
              type: string
              description: 'The `dataref` attribute MAY be used to reference another location where this information is stored. The information, whether accessed via `data` or `dataref` MUST be identical.'
              format: url
              example: 'http://apihost/some/api/v1/resource/1234'
        - title: Timestamp
          type: object
          x-tags:
            - CloudEvents
          description: |-
            Type: `Timestamp`

            Description: Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.

            * Constraints:
                * OPTIONAL
                * If present, MUST adhere to the format specified in [RFC 3339](https://tools.ietf.org/html/rfc3339)
          properties:
            time:
              type: string
              description: 'Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect.'
              format: date-time
              example: '2020-10-02T15:00:00.05Z'
      x-examples:
        Data Example:
          specversion: '1.0'
          type: com.github.pull.create.v1
          source: 'https://github.com/cloudevents/v1/spec/pull/123'
          id: c38ce597-bca4-4bc9-9f00-0339c935568b
          datacontenttype: application/json
          data: '{ "name": "value"}'
        DataRef Example:
          specversion: '1.0'
          type: com.github.pull.create.v1
          source: 'https://github.com/cloudevents/v1/spec/pull/123'
          id: c38ce597-bca4-4bc9-9f00-0339c935568b
          datacontenttype: application/json
          dataref: 'https://github.com/cloudevents/v1/spec/pull/123/events/1234.xml'
    Subscription:
      allOf:
        - title: Subscription
          description: "Subscription to event types with the given delivery and trigger matching criteria. The provider offering resource subscriptions, must provide the list of `type`s supported within their API specification. Please refer to the API provider's documentation for more details."
          type: object
          properties:
            type:
              type: string
              minLength: 1
              example: com.group.org.service.function.v1
              description: |-
                This attribute contains a value describing the type of event
                    related to the originating occurrence. Often this attribute is used for
                    routing, observability, policy enforcement, etc.
            trigger:
              type: object
              description: Resource template to match fields for subscription and trigger the delivery of an event.
            callback:
              type: string
              format: url
              example: 'http://apihost/consumer/callback'
              minLength: 1
              description: 'Callback URL of consumer (Optional: if callback is used as mechanism).'
            payloadType:
              type: string
              description: How the payload is to be delivered (data or dataref).
              enum:
                - data
                - dataref
              example: dataref
            deliveryType:
              type: string
              description: How the events are to be delivered to the subscriber (callback or server sent event).
              enum:
                - callback
                - server_sent_event
              example: server_sent_event
          required:
            - type
            - payloadType
            - deliveryType
        - type: object
          properties:
            trigger:
              $ref: '#/components/schemas/Trigger'
      title: Subscription
      description: "Subscription to event types with the given delivery and trigger matching criteria. The provider offering resource subscriptions, must provide the list of `type`s supported within their API specification. Please refer to the API provider's documentation for more details."
    Trigger:
      title: Trigger
      type: object
      description: "The `trigger` provides 2 functions:\n\n- `selectionFilter`: Is the event selection criteria, as a map of key values - where the key is the attribute/field (field1, field1.subfield1, etc.) and the value is the requested value to be matched.\n\nEvents matching the given criteria are selected from all events generated by the provider as a logical AND operation: \n  - Matching `string` attributes:\n    - `name: \"iPhone\"` - will register an interest in events where `name EQUALS \"iPhone\"`.\n    - `name: \"iPhone*\"` - will register an interest in events where `name STARTS_WITH \"iPhone\"`.\n    - `name: \"*iPhone\"` - will register an interest in events where `name ENDS_WITH \"iPhone\"`.\n    - `name: \"*iPhone*\"` - will register an interest in events where `name CONTAINS \"iPhone\"`.\n  - Matching other attribute types (number, integer, boolean, etc.):\n    - Only exact matches are initially provided. Providers may extend possibilities to fulfil their usecase.\n- `responseFilter`: Is the list of fields to be returned in `data` response payloads. When the subscription is of type `data`, the responseFilter field is evaluated to include only specified fields in payload responses. If the subscription is of type `dataref`, this responseFilter is ignored."
      properties:
        responseFilter:
          type: array
          description: 'Fields to include in payload responses, when event subscription is of type `data`. Data provided as an Array of strings.'
          items:
            type: string
        selectionFilter:
          type: object
          description: 'Events matching the given criteria are selected from all events generated by the provider as a logical AND operation. Structure will be of the original subscribed resource, as published by the provider.'
          additionalProperties:
            type: string
    SubscriptionResponse:
      title: SubscriptionResponse
      allOf:
        - $ref: '#/components/schemas/Subscription'
        - type: object
          properties:
            subscriptionId:
              type: string
              description: "The unique subscription id for a consumer's subscription. This is present only in subscription management responses."
            subscriberId:
              type: string
              description:  "Consumer subject from consumer's access token."
            publisherId:
              type: string
              description:  "Provider subject from provider's access token."
            createdAt:
              type: string
              description: "Timestamp when the subscription was created."
          required:
            - subscriptionId
            - subscriberId
            - publisherId
            - createdAt
      description: 'This model augments the `Subscription` resource, with the `subscriptionId` that was assigned by the intermediary during subscription. The `subscriptionId` attribute is used in responses to subscription management operations to identity individual consumer subscriptions.'
  securitySchemes:
    openid_access:
      type: openIdConnect
      openIdConnectUrl: 'https://idpserver'
      description: Authentication requirements - Access Token in Authorization header.
tags:
  - name: Subscriptions
  - name: Publishing
  - name: Streams
  - name: HealthCheck
paths:
  /subscriptions/v1:
    post:
      summary: Create subscription (DEPRECATED)
      deprecated: true
      tags:
        - Subscriptions
      operationId: createSubscription
      description: "Create a new subscription. The absence of a `trigger` resource template, indicates all event types supported by the provider. The provider provides a list of `type` for the events that are supported by the provider - this should form part of the API specification documentation.  \n\nIdentical subscription requests from a consumer, will only yield one subscription; the same subscription payload (type, trigger, etc.) will yield a single subscription for the consumer.\n\nThe provider will provide it's own authorization token along with the request, in order to identity the consumer, the `X-Pubsub-Subscriber-Id` request header containing the consumer subject is provided along with the request. On request fulfilment, both `201 Created` and `303 See Other` responses contain the `X-Subscription-Id` of the created subscription.\n\nProvider subject is identified by the `sub` attribute of the access token in the authorization header.\n\n* `201 Created` - Success for Callbacks: Access token + X-Pubsub-Subscriber-Id + Payload valid.\n* `303 See Other` - Success for Server Sent Event: Access token + X-Pubsub-Subscriber-Id + Payload valid.\n* `400 Bad Request` - Missing X-Pubsub-Subscriber-Id header or required payload invalid/missing data.\n* `401 Unauthorized` - No access token provided by provider to intermediary.\n* `403 Forbidden` - Insufficient permissions for provider to create subscriptions.\n* `500 Internal Server Error` - All unexpected internal errors.\n* `503 Service Unavailable`- Service is temporarily unavailable and unable to fulfil request.
      DEPRECATED. Please refrain from using this operation and use the rover based declarative method where feasible."
      responses:
        '201':
          description: 'Created - Provider authorized subscription for the consumer, and successfully subscribed consumer to Callback. For callbacks to be delivered, the intermediary must be subscribed to the consumer receiving the callback, and the given callback URL must be accessible by the intermediary.'
          headers:
            X-Subscription-Id:
              schema:
                type: string
              description: The unique identifier of the resulting subscription on the provider.
              required: true
            Location:
              schema:
                type: string
                format: url
              description: URL location to newly created resource.
              required: true
        '303':
          description: 'OK - Provider authorized subscription for the consumer, and successfully subscribed consumer to Server Sent Events. The consumer will be redirected to an endpoint to receive a `application/stream+json` with the resource event payload. For server-sent-events to be delivered, the consumer must be subscribed to the intermediary in order to follow redirects to the location that will provide the stream.'
          headers:
            X-Subscription-Id:
              schema:
                type: string
              description: The unique identifier of the resulting subscription on the provider.
              required: true
            Location:
              schema:
                type: string
                format: url
              description: 'URL location to newly created resource, for redirection and GET stream of events.'
              required: true
        '400':
          description: Bad Request - Missing X-Pubsub-Subscriber-Id header or required payload invalid/missing data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 'Unauthorized. The publisher has not provided authorization to fulfil the request. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: 'Forbidden. The publisher does not have sufficient authorization to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: 'Service Unavailable. The intermediary is unable to accept the event.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - openid_access: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      parameters:
        - schema:
            type: string
          in: header
          name: X-Pubsub-Subscriber-Id
          description: "Consumer subject from consumer's access token."
          required: true
    get:
      summary: Query subscriptions
      tags:
        - Subscriptions
      responses:
        '200':
          description: OK - Successful Subscription Query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionResponse'
        '400':
          description: 'Bad Request - Malformed subscriberId query parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 'Unauthorized. The publisher has not provided authorization to fulfil the request. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: 'Forbidden. The publisher does not have sufficient authorization to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: 'Service Unavailable. The intermediary is unable to accept the event.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: listSubscriptions
      description: "Return all active consumer subscriptions for the provider making the request. The provider is identified by its authorization token (subject), this endpoint provides a collection of all active subscriptions that a provider has authorized and created for its consumers. The provider may optionally provide `subscriberId`, the subject of the consumer, to narrow the resulting list to subscriptions belonging only to the given subscriber. The provider must ensure that only `authorized` consumers can retrieve and manage their subscriptions. \n\nProvider subject is identified by the `sub` attribute of the access token in the authorization header.\n\n* `200 OK` - Access token valid + returns list of all active subscriptions or empty array if there are no active subscriptions, or for given subscriberId.\n* `401 Unauthorized` - No access token provided by provider to intermediary.\n* `403 Forbidden` - Insufficient permissions for provider to list subscriptions.\n* `500 Internal Server Error` - All unexpected internal errors.\n* `503 Service Unavailable`- Service is temporarily unavailable and unable to fulfil request."
      security:
        - openid_access: []
      parameters:
        - schema:
            type: string
          in: query
          name: subscriberId
          description: 'Subscriber Id, the subject of the authorized consumer, as provided by the provider.'
    parameters: []
    head:
      tags:
        - HealthCheck
      summary: health check endpoint
      description: may be called to check whether the endpoint is available
      operationId: checkSubscriptionsHealth
      deprecated: true
      responses:
        "204":
          description: '`No Content` - endpoint available.'
          headers:
            X-Health-Check-Timestamp:
              description: time when the health check was done
              style: simple
              schema:
                format: date-time
                type: string
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/subscriptions/v1/{subscriptionId}':
    parameters:
      - schema:
          type: string
        name: subscriptionId
        in: path
        required: true
        description: Consumer subscription id
    delete:
      summary: Delete subscription by Id (DEPRECATED)
      deprecated: true
      tags:
        - Subscriptions
      responses:
        '204':
          description: No Content - Provider successfully unsubscribed consumer from an event it publishes.
        '400':
          description: Bad Request - Malformed subscription id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 'Unauthorized. The publisher has not provided authorization to fulfil the request. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden. The publisher does not have sufficient authorization to fulfil the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'Not Found - The given subscription id does not exist.'
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: 'Service Unavailable. The intermediary is unable to accept the event.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: deleteSubscription
      description: |-
        Deletes the subscription based on the subscription id. A provider may only delete a subscription that it has authorized. If a provider attempts to delete a subscription it has not authorized (a subscription id that was authorized by another provider/publisher), the intermediary will respond with `403 Forbidden`.

        Provider subject is identified by the `sub` attribute of the access token in the authorization header.

        * `204 No Content` - Access token + subscription id authorized by provider are valid.
        * `400 Bad Request`- Malformed subscription id parameter.
        * `401 Unauthorized` - No access token provided by provider.
        * `403 Forbidden` - Subscription id is not authorized by provider (belongs to another provider).
        * `404 Not Found` - Subscription id does not exist.
        * `500 Internal Server Error` - All unexpected internal errors.
        * `503 Service Unavailable`- Service is temporarily unavailable and unable to fulfil request.
        DEPRECATED. Please refrain from using this operation and use the rover based declarative method where feasible.
      security:
        - openid_access: []
  /events/v1:
    post:
      summary: Create a new event (Provider Publish)
      operationId: publishEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: ''
      responses:
        '201':
          description: Created - The intermediate has successfully accepted and created the event and queued it for delivery to subscribed consumers that match both the `type` and `trigger` conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          headers:
            Location:
              schema:
                type: string
                format: url
              description: URL location to newly created resource.
              required: true
        '400':
          description: 'Bad Request. The submitted resource does not fulfil the required schema, or mandatory parameters.'
        '401':
          description: 'Unauthorized. The publisher has not provided authorization to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: 'Forbidden. The publisher does not have sufficient authorization to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: 'Service Unavailable. The intermediary is unable to accept the event.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      security:
        - openid_access: []
      tags:
        - Publishing
      description: |-
        Post a new event. A provider uses this endpoint to publish a new event to the intermediary. The payload of the event, contains the routing information `type`, and either `dataref` or both `dataref` and `data` for the event.

        Provider subject is identified by the `sub` attribute of the access token in the authorization header.
    head:
      tags:
        - HealthCheck
      summary: health check endpoint
      description: may be called to check whether the endpoint is available
      operationId: checkHealthEvent
      responses:
        "204":
          description: '`No Content` - endpoint available.'
          headers:
            X-Health-Check-Timestamp:
              description: time when the health check was done
              style: simple
              schema:
                format: date-time
                type: string
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/sse/v1/{eventType}':
    head:
      tags:
        - HealthCheck
      summary: health check endpoint
      description: may be called to check whether the endpoint is available
      operationId: checkHealthSse
      parameters:
        - schema:
            type: string
          name: eventType
          in: path
          required: true
          description: The event type of the subscription.
      responses:
        "204":
          description: '`No Content` - endpoint available.'
          headers:
            X-Health-Check-Timestamp:
              description: time when the health check was done
              style: simple
              schema:
                format: date-time
                type: string
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/sse/v1/{eventType}/{subscriptionId}':
    parameters:
      - schema:
          type: string
        name: eventType
        in: path
        required: true
        description: The event type of the subscription.
      - schema:
          type: string
        name: subscriptionId
        in: path
        required: true
        description: The subscription id provided by the intermediary after successful subscription.
    get:
      summary: Read event stream
      tags:
        - Streams
      responses:
        '200':
          description: 'OK. Returns a successful response with the `application/stream+json` media-type, for the consumer to start reading events streamed to it.'
          content:
            application/stream+json:
              schema:
                $ref: '#/components/schemas/Event'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: 'Bad Request - Malformed subscription id.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: 'Unauthorized. The publisher has not provided authorization to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: 'Forbidden. The publisher does not have sufficient authorization to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: 'Not Found - The given subscription id does not exist.'
        '500':
          description: 'Internal Server Error. The intermediary could not fulfil the request due to some unexpected condition.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '503':
          description: 'Service Unavailable. The intermediary is temporarily unavailable to fulfil the request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      operationId: consumeEvents
      security:
        - openid_access: []
      description: |-
        Read event stream for a previously authorized subscription created by a provider. The consumer must provider a valid access token and subscription id for the request to be successfully fulfilled.

        Consumer subject is identified by the `sub` attribute of the access token in the authorization header. In order to receive event streams, the consumer must be subscribed to the intermediary.

        * `200 OK` - Access token + subscription id valid for consumer.
        * `400 Bad Request`- Malformed/missing subscriptionId parameter.
        * `401 Unauthorized` - No access token provided by consumer.
        * `403 Forbidden` - Subscription id does not belong to consumer.
        * `404 Not Found` - Subscription id does not exist.
        * `500 Internal Server Error` - All unexpected internal errors.
        * `503 Service Unavailable`- Service is temporarily unavailable and unable to fulfil request.
security:
  - openid_access: []
